@using Construx.App.Constants
@model IEnumerable<Construx.App.Domain.Entities.Service>

@{
    ViewData["Title"] = "Index";
}

<div class="container mb-5">
    <!--for searching-->
    <div class="row d-flex justify-content-sm-center align-items-center">
        <form method="get" asp-action="Index" class="col-6 input-group">
            <input type="search" placeholder="Search for a service" name="searchString" value="@ViewData["getSearchString"]" class="form-control" />
            <input type="hidden" name="sortCategory" value="@ViewData["getSortCategory"]" />
            <input type="submit" value="Search" class="btn btn-primary" />
        </form>
    </div>
</div>

<div class="row">
    <div class="dropdown col-3">
        <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Select category
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="max-height: 500px; overflow-y: auto;">
            @{
                foreach (var item in ViewBag.Categories)
                {
                    <a class="dropdown-item" asp-route-sortCategory="@item.Name" asp-route-searchString="@ViewData["getSearchString"]">@item.Name</a>
                }
            }
        </div>
    </div>
    <div class="col-5"></div>
    <div class="col-4 d-flex justify-content-end align-items-center"><a asp-action="Index" class=""> Get All Services</a></div>
</div>


@if (User.IsInRole(UserRoles.Admin))
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
}
<table class="table mt-3">
    <thead>
        <tr>
            <th class="th-alt">
                @Html.DisplayNameFor(model => model.Company)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th class="th-alt">
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th class="th-alt">
                @Html.DisplayNameFor(model => model.Rating)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr class="">
                <td class="td-alt">
                    @Html.DisplayFor(modelItem => item.Company.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Category.Name)
                </td>
                <td class="td-alt">
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td class="td-alt">
                    <span class="green">@Html.DisplayFor(modelItem => item.Rating)/5</span>
                </td>
                <td >
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                    @if (User.IsInRole(UserRoles.Admin) || (User.IsInRole(UserRoles.Representative) && User.Identity.Name.Equals(item.Company.Representative?.User.UserName)))
                    {
                        <span>|</span>
                        <a asp-action="Edit" asp-route-id="@item.Id"> Edit </a>
                    }
                    @if (User.IsInRole(UserRoles.Admin))
                    {
                        <span>|</span>
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>